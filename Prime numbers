// check a number is prime or not
bool isPrime(int x) {
    for (int d = 2; d * d <= x; d++) {
        if (x % d == 0)
            return false;
    }
    return true;
}
//Normal sieve of eatosthenes 
void SieveOfEratosthenes(int n)
{
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
 
    for (long long p = 2; p * p <= n; p++)
    {
        if (prime[p] == true) 
        {
            for (long long i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= n; p++)
        if (prime[p])
            cout << p << " ";
}
// Sieve O(N) time complexity

const long long MAX_SIZE = 1000001; 
vector<long long >isprime(MAX_SIZE , true); 
vector<long long >prime; 
vector<long long >SPF(MAX_SIZE); 

// function generate all prime number less then N in O(n) 
void manipulated_seive(int N) 
{
    isprime[0] = isprime[1] = false ; 
    for (long long int i=2; i<N ; i++) 
    {
        if (isprime[i]) 
        { 
            prime.push_back(i); 
            SPF[i] = i; 
        } 
        for (long long int j=0; 
             j < (int)prime.size() && 
             i*prime[j] < N && prime[j] <= SPF[i]; 
             j++) 
        { 
            isprime[i*prime[j]]=false; 
  
            // put smallest prime factor of i*prime[j] 
            SPF[i*prime[j]] = prime[j] ; 
        } 
    } 
} 
